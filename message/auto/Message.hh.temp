// Copyright (c) 2010
// All rights reserved.

#ifndef CATA_MESSAGE_HH
#define CATA_MESSAGE_HH

#include <string>
#include "soil/DateTime.hh"
#include "json/json.hh"

namespace cata {

typedef enum {
  // REQ ID start
[REQ_ID]
  REQ_ID_MAX = 200,

  // REQ QRY ID start
[REQ_QRY_ID]
  REQ_QRY_ID_MAX = 500,

  // RSP ID start
[RSP_ID]
  RSP_ID_MAX = 1000,

  // RTN ID start
[RTN_ID]
  RTN_ID_MAX = 2000
}MessageID;

class Message {
 public:
  explicit Message(MessageID id, const std::string& name):
      id_(id),
      name_(name) {
  }

  virtual ~Message() {
  }

  virtual std::string toString() const = 0;

  virtual void toJSON(json::Document* doc) const {
    assert(doc);

    std::string key = "timestamp";
    json::addMember(doc, key, timeStamp());
  }

  MessageID id() const {
    return id_;
  }

  const std::string& name() const {
    return name_;
  }

  std::string timeStamp() const {
    return timestamp_.toString();
  }

 private:
  MessageID id_;
  std::string name_;

  soil::DateTime timestamp_;
};

}  // namespace cata

#endif
